{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"dominios/","title":"Dominios","text":""},{"location":"dominios/#domains","title":"Domains","text":""},{"location":"dominios/#community","title":"Community","text":"<ul> <li> 1stborntribe.com </li> <li> brindopor.com </li> <li> contodo.live </li> <li> feriadelaamistad.com </li> <li> fullsentit.com </li> <li> galeanapecanfestival.com </li> <li> galeanavalleypecan.com </li> <li> lebaron.mx </li> <li> lebarongaleana.com </li> <li> lebarontoday.com </li> <li> lebaronvecindad.com </li> <li> municipiosenpaz.com </li> <li> the1stborntribe.com </li> <li> thefirstborntribe.com </li> <li> tribeofthefirstborn.com </li> <li> tribudelprimog\u00e9nito.com </li> <li> yosoyuno.com.mx </li> <li> yosoyuno.mx </li> <li> lgformatos.com </li> <li> galeana.biz </li> <li> youthofisrael.com </li> </ul>"},{"location":"dominios/#drywall","title":"Drywall","text":"<ul> <li> allprodrywallsolutions.com </li> <li> bozemangaragerenovation.com </li> <li> bozmangradgerenovation.com </li> <li> portal-bif.com </li> <li> portal-redrock.com </li> <li> saladoconstruction.com </li> <li> saladodrywall.com </li> <li> saladohandyman.com </li> <li> saladoremodel.com </li> <li> teamkosdrywall.com </li> <li> teamwalpro.com </li> <li> walprobuilders.com </li> <li> whistle2012.com </li> </ul>"},{"location":"dominios/#family","title":"Family","text":"<ul> <li> adrianesunidos.mx </li> <li> losadrianes.com </li> <li> rhonitaslegacy.com </li> <li> endmexicoterrorists.com </li> <li> gritopor.com </li> <li> justiceforlamora.com </li> <li> ultimarevolucion.com.mx </li> </ul>"},{"location":"dominios/#other","title":"Other","text":"<ul> <li> api-galeana.biz </li> <li> api-managewhistle.com </li> <li> bif-backend.com </li> <li> kaosnutritionshop.com </li> <li> kosfitness-api.com </li> <li> kosfitness.net </li> <li> kosfitness.org </li> <li> kosfitnessclub.com </li> <li> lebarongaleana-api.com </li> <li> managewhistle.com </li> <li> saladowebapps.com </li> <li> saladoservices.com </li> <li> whistlecoding.com </li> <li> whistledrywall.com </li> <li> whistledrywallapp.com </li> <li> whistledynasty.com </li> <li> kaosnutrition.com </li> <li> healthywecanbe.life </li> <li> chip-in-fbt.com </li> </ul>"},{"location":"author/hector9923/","title":"H\u00e9ctor S\u00e1nchez","text":"<p>Full-Stack Developer with experience in Django, React, and Material-UI. Here are some of the guides written by H\u00e9ctor:</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"devops/configurar-react-vite-para-despliegue-en-netlify/","title":"Configurar react vite para despliegue en netlify","text":""},{"location":"devops/configurar-react-vite-para-despliegue-en-netlify/#cambiar-viteconfigjs-a","title":"Cambiar <code>vite.config.js</code> a:","text":"<pre><code>import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\n\nexport default defineConfig({\n  plugins: [react()],\n  build: {\n    rollupOptions: {\n      output: {\n        manualChunks(id) {\n          if (id.includes('node_modules')) {\n            return id.toString().split('node_modules/')[1].split('/')[0].toString();\n          }\n        }\n      }\n    }\n  }\n});\n</code></pre>"},{"location":"devops/configurar-react-vite-para-despliegue-en-netlify/#agrega-esto-a-packagejson","title":"Agrega esto a <code>package.json</code>:","text":"<pre><code>  \"optionalDependencies\": {\n    \"@rollup/rollup-linux-x64-gnu\": \"4.6.1\"\n  }\n</code></pre>"},{"location":"devops/deploy-django-to-aws/","title":"Deploy django to aws","text":""},{"location":"devops/deploy-django-to-aws/#1-instalacion-de-la-interfaz-de-linea-de-comandos-de-elastic-beanstalk-aws-eb-cli","title":"1. Instalaci\u00f3n de la interfaz de l\u00ednea de comandos de elastic beanstalk AWS EB CLI","text":"<p>Instalala globalmente en tu computadora abriendo cualquier terminal</p> <pre><code>pip install awsebcli\n</code></pre> <p>Para comprobar la instalaci\u00f3n de la CLI y ver que funciona corre:</p> <pre><code>eb --version\n</code></pre> <p>Te deber\u00eda salir la versi\u00f3n que tienes, por ejemplo:</p> <pre><code>EB CLI 3.20.8\n</code></pre>"},{"location":"devops/deploy-django-to-aws/#2-inicializa-tu-aplicacion-en-elastic-beanstalk-usando-la-cli","title":"2. Inicializa tu aplicaci\u00f3n en Elastic Beanstalk usando la CLI","text":"<ul> <li>Deber\u00e1s tener un usuario IAM con los permisos correctos para poder tener acceso a desplegar aplicaciones a Elastic Beanstalk, debes tener a la mano la Access Key ID y la Secret Access Key, contacta al project manager si necesitas crear un usuario, o solo obtener los permisos correctos.</li> <li> <p>Ahora abre tu aplicacion de django en tu editor de c\u00f3digo (VS Code) y abre ah\u00ed una terminal en la carpeta ra\u00edz del proyecto del backend de django, a la altura d\u00f3nde se encuentra el archivo manage.py corre el siguiente comando para inicializar una nueva aplicaci\u00f3n en Elastic Beanstalk en AWS, a partir de este comando te preguntar\u00e1 muchas cosas a las que tendr\u00e1s que responder con teclas al escoger las opciones deseadas</p> <pre><code>eb init\n</code></pre> </li> <li> <p>Lo primero que te preguntar\u00e1 es en cu\u00e1l regi\u00f3n quieres tenerla, elige la opci\u00f3n de: us west 2 Oregon con el numero correcto, casi siempre es la opci\u00f3n n\u00famero 3</p> </li> <li> <p>Si es la primera vez que despliegas una aplicaci\u00f3n, aqu\u00ed te pedir\u00e1 tus credenciales de AWS mencionadas al principio de esta secci\u00f3n n\u00famero 2</p> </li> <li> <p>Detectar\u00e1 que est\u00e1s usando Python, responde S\u00ed, luego tienes que seleccionar una versi\u00f3n de plataforma, puedes elegir la m\u00e1s reciente</p> </li> <li> <p>Elige S\u00ed para SSH (secure shell conection)</p> </li> <li> <p>Luego necesitas generar un RSA Keypair, que te permitir\u00e1 acceder a la SSH m\u00e1s adelante.</p> </li> <li> <p>Hasta este punto ya habr\u00e1s creado una aplicaci\u00f3n nueva en Elastic Beanstalk, puedes verla en la consola de AWS en Elastic Beanstalk accediendo con tu usuario, contrase\u00f1a y el ID del equipo (pregunta al project manager si no sabes cual es)</p> </li> </ul>"},{"location":"devops/deploy-django-to-aws/#3-crea-el-entorno-para-la-aplicacion","title":"3. Crea el Entorno para la aplicaci\u00f3n","text":"<ul> <li> <p>Regresa a la terminal en VS code posicionado en la carpeta raiz del proyecto de django como lo estabas antes y corre el siguiente comando para crear el entorno de tu aplicaci\u00f3n:</p> <pre><code>eb create\n</code></pre> </li> <li> <p>Te har\u00e1 varias preguntas tambi\u00e9n, </p> </li> <li> <p>La primera es el prefijo del dominio predeterminado que te da Elastic Beanstalk con la palabra -dev al final pero mejor crea uno sin la palabra dev para que se vea mejor, como el nombre de la aplicacion en s\u00ed, ejemplo: <code>lebaron-today</code></p> </li> <li> <p>La segunda pregunta es seleccionar el tipo de <code>load balancer</code>, hay tres: <code>classic, application, network</code>, elige el de <code>classic</code> para que sea m\u00e1s barato</p> </li> <li> <p>La tercera es: Quieres habilitar <code>Spot Fleet requests</code> para el entorno? elige que no</p> </li> <li> <p>Esto tomar\u00e1 un rato, y si el entorno de la aplicaci\u00f3n se cre\u00f3 exitosamente con todo lo dem\u00e1s en AWS, aparecer\u00e1 esto en la terminal: </p> </li> </ul>"},{"location":"devops/deploy-django-to-aws/#4-personaliza-y-configura-el-proyecto-de-django","title":"4. Personaliza y configura el proyecto de Django","text":"<ul> <li> <p>De aqu\u00ed en adelante tedr\u00e1s que configurar varias cosas en el proyecto de Django como en carpetas y archivos, despu\u00e9s tambi\u00e9n configurar el mismo entorno en la <code>consola de Elastic Beanstalk</code>. Primero configuremos el proyecto de Django y luego el entorno en la consola de Elastic Beanstalk.</p> </li> <li> <p>Deber\u00e1s instalar una lista o serie de dependencias necesarias para producci\u00f3n en tu entorno virtual de python activado: boto3, psycopg, django-storages despu\u00e9s de instalar todo lo necesario para producci\u00f3n crea un nuevo requirements.txt por buena pr\u00e1ctica, con el comando:</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre> </li> </ul>"},{"location":"devops/deploy-django-to-aws/#en-settingspy-haz-lo-siguiente","title":"En SETTINGS.PY haz lo siguiente:","text":"<ul> <li>Cambia <code>DEBUG = True</code> a <code>DEBUG = False</code></li> <li>En <code>ALLOWED_HOSTS</code> agrega el dominio predeterminado que cre\u00f3 Elastic Beanstalk para tu entorno que es como algo asi: <code>nombre-de-tu-aplicacion.us-west-2-elasticbeanstalk.com</code> y agrega el dominio que el project manager comprar\u00e1 y que utilizar\u00e1 tu backend.</li> <li>En <code>DATABASES</code>  agrega el siguiente bloque de c\u00f3digo:</li> </ul> <pre><code>DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql_psycopg2',\n        'NAME': os.environ['RDS_DB_NAME'],\n        'USER': os.environ['RDS_USERNAME'],\n        'PASSWORD': os.environ['RDS_PASSWORD'],\n        'HOST': os.environ['RDS_HOSTNAME'],\n        'PORT': os.environ['RDS_PORT'],\n    }\n}\n</code></pre> <ul> <li>Luego agrega el siguiente bloque de c\u00f3digo para configurar los archivos est\u00e1ticos que usar\u00e1 Elastic Beanstalk con el Bucket de S3 usando la dependencia de Boto3, puedes agregar este bloque de c\u00f3digo arriba de la secci\u00f3n del c\u00f3digo de STATIC FILES:</li> </ul> settings.py<pre><code>if 'AWS_STORAGE_BUCKET_NAME' in os.environ:\n    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'\n    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'\n\n    AWS_STORAGE_BUCKET_NAME = os.environ['AWS_STORAGE_BUCKET_NAME']\n    AWS_S3_REGION_NAME = os.environ['AWS_S3_REGION_NAME']\n\n    AWS_S3_ACCESS_KEY_ID = os.environ['AWS_ACCESS_KEY_ID']\n    AWS_S3_SECRET_ACCESS_KEY = os.environ['AWS_SECRET_ACCESS_KEY']\n</code></pre>"},{"location":"devops/deploy-django-to-aws/#crea-nueva-carpeta-y-archivos","title":"Crea nueva carpeta y archivos:","text":"<ul> <li>En la carpeta ra\u00edz de tu proyecto de Django crea una carpeta llamada <code>.ebextensions</code> con dos archivos dentro llamados: <code>01_packages.config</code> y <code>02_django.config</code>.</li> <li>Dentro de <code>01_packages.config</code> pon:</li> </ul> <p><pre><code>packages:\n    yum:\n        git: []\n        postgresql15: []\n</code></pre> - Dentro de <code>02_django.config</code> pon el siguiente bloque de c\u00f3digo, pero debes cambiar las l\u00edneas de c\u00f3digo: <code>WSGIPath... y DJANGO_SETTINGS_MODULE:</code> al nombre correcto de tu proyecto de django porque es la ruta hacia la application y hacia el archivo settings</p> <pre><code>option_settings:\n    aws:elasticbeanstalk:container:python:\n//CAMBIA DONDE DICE backend AL NOMBRE DE TU PROYECTO DE DJANGO// \u2193\n        WSGIPath: backend.wsgi:application\n    aws:elasticbeanstalk:application:environment:\n//CAMBIA DONDE DICE backend AL NOMBRE DE TU PROYECTO DE DJANGO// \u2193\n        DJANGO_SETTINGS_MODULE: backend.settings\n    aws:elasticbeanstalk:environment:proxy:staticfiles:\n        /static: staticfiles\n\ncontainer_commands:\n    01_migrate:\n        command: \"source /var/app/venv/*/bin/activate &amp;&amp; python3 manage.py migrate --noinput\"\n        leader_only: true\n    02_collectstatic:\n        command: \"source /var/app/venv/*/bin/activate &amp;&amp; python3 manage.py collectstatic --noinput\"\n        leader_only: true\n</code></pre> <ul> <li>Los comandos de <code>01_migrate</code> y <code>02_collectstatic</code> son para migrar la base de datos de producci\u00f3n al hacer el deploy y aplicar los archivos estaticos y de estilos:</li> </ul>"},{"location":"devops/deploy-django-to-aws/#5-personaliza-y-configura-el-entorno-en-elastic-beanstalk-y-sus-servicios-relacionados","title":"5. Personaliza y configura el entorno en Elastic Beanstalk y sus servicios relacionados","text":""},{"location":"devops/deploy-django-to-aws/#networking-and-database","title":"Networking and database","text":"<ul> <li>Primero configura la base de datos en la secci\u00f3n de  Networking and database (Esto crear\u00e1 su respectiva base de datos en el servicio de AWS RDS Relational Data Base)<ol> <li>Selecciona Engine: postgres</li> <li>Engine version la mas reciente</li> <li>Instance class db.t3.micro</li> <li>Storage 10 GB</li> <li>Crea un usuario con nombre de usuario que se parezca o sea igual al nombre de la aplicacion y cr\u00e9ale una contrase\u00f1a, guarda estas credenciales y pasaselas al manager</li> <li>Guarda los cambios y revisa que se actualice exitosamente el entorno</li> </ol> </li> </ul>"},{"location":"devops/deploy-django-to-aws/#certificate-manager","title":"Certificate Manager","text":"<ul> <li> <p>La siguiente secci\u00f3n es para que la aplicaci\u00f3n de Django est\u00e9 en HTTPS en internet y se requerir\u00e1 que ya est\u00e9 comprado el dominio que se usar\u00e1 para esta aplicaci\u00f3n de django, si no est\u00e1 comprado todav\u00eda, contacta al project manager y omite estos siguientes pasos: </p> <ol> <li> <p>Ve al servicio de AWS llamado Certificate Manager y obt\u00e9n un nuevo certificado SSL para el dominio, solo tienes que poner el dominio correctamente y dejar las validaciones como est\u00e1n por DNS</p> </li> <li> <p>Luego entra en el certificado que acabas de solicitar que est\u00e1 en estatus pendiente, y da click en el bot\u00f3n de Create records in Route 53 y despu\u00e9s de esto el estatus cambiar\u00e1 a Issued en color verde y estar\u00e1 listo para usarse en el entorno de Elastic Beanstalk</p> </li> <li> <p>De regreso en Elastic Beanstalk, en Configure instance traffic and scaling en la secci\u00f3n de Listeners agrega un nuevo puerto 443 protocolo HTTPS para que sea seguro y selecciona el certificado que acabas de solicitar y cambia a que sea Single instance en Capacity o si no te deja, ponle solo Max 1 instances si tiene Load balanced. </p> </li> </ol> </li> </ul>"},{"location":"devops/deploy-django-to-aws/#route-53","title":"Route 53","text":"<ul> <li>En Route 53 en la ruta hospedada de tu dominio de backend agrega un registro tipo A que sea alias y agrega tu entorno de Elastic Beanstalk para que dirija el tr\u00e1fico a ese dominio correctamente, sin este registro el dominio no hospedar\u00e1 tu aplicaci\u00f3n de Django como esperas.</li> </ul>"},{"location":"devops/deploy-django-to-aws/#updates-monitoring-and-logging","title":"Updates, monitoring, and logging","text":"<ul> <li>Agrega 5 Environment Properties en Updates, monitoring, and logging a mero abajo:<ol> <li><code>AWS_ACCESS_KEY_ID</code> para esta crea un usuario con el nombre descriptivo de tu aplicacion ya que solo ser\u00e1 usado para acceder al bucket de S3 de tu aplicacion, crealo en IAM con permiso AmazonS3FullAccess y creale a ese usuario Access key para que obtengas la Access key y la Secret Key para ponerlas en las variables de entorno.</li> <li><code>AWS_SECRET_ACCESS_KEY</code> el valor de esta es el del mismo usuario que creaste</li> <li><code>AWS_S3_REGION_NAME</code> deber\u00eda ser la regi\u00f3n del bucket que tienes que crear en S3 cr\u00e9alo en la regi\u00f3n de Oregon y el valor para esta variable ser\u00e1 us-west-2 El bucket debe estar configurado de la siguiente manera: quita la checkbox de Block all public access y todo lo demas igual y crealo con un nombre descriptivo sobre la aplicacion de elastic beanstalk</li> <li><code>AWS_STORAGE_BUCKET_NAME</code> el nombre del bucket que acabas de crear</li> </ol> </li> </ul>"},{"location":"devops/deploy-django-to-aws/#de-regreso-a-tu-terminal-de-tu-proyecto","title":"De regreso a tu terminal de tu proyecto","text":"<ul> <li> <p>Despu\u00e9s de tener todo tu proyecto correctamente configurado para producci\u00f3n, despliega una nueva actualizacion a Elastic Beanstalk, los deploys se hacen desde el \u00faltimo commit, as\u00ed que haz un commit con:</p> <pre><code>git add .\n\ngit commit -m \"tu mensaje\"\n</code></pre> </li> <li> <p>Ahora s\u00ed haz un deploy de actualizaci\u00f3n del entorno con:</p> <pre><code>eb deploy\n</code></pre> </li> <li> <p>Revisa:</p> <ol> <li> <p>que se haya hecho el despliegue de actualizaci\u00f3n de manera exitosa al entorno de la aplicaci\u00f3n de Elastic Beanstalk en la terminal de da el resultado, si fall\u00f3 consulta los <code>logs</code> que se encuentran en le panel del entorno de Elastic Beanstalk, descarga y ve los ultimos 100 y mira la secci\u00f3n de eb-engine. Si aun sigues batallando con el error del despliegue contacta al project manager para que te ayude.</p> </li> <li> <p>Revisa en el entorno en la console de Elastic Beanstalk que se haya creado la Path /static con el Directory static</p> </li> </ol> </li> </ul>"},{"location":"devops/deploy-django-to-aws/#6-crea-un-superusuario-usando-ssh","title":"6. Crea un superusuario usando SSH","text":"<ul> <li> <p>En la terminal de tu proyecto corre el comando <code>eb ssh</code> que te llevar\u00e1 a la Secure Shell conection de Amazon para poder correr comandos de python para por ejemplo crear el super usuario!</p> <ol> <li> <p>corre el siguiente comando:</p> <pre><code>sudo cat /opt/elasticbeanstalk/deployment/env\n</code></pre> </li> <li> <p>Luego correo el siguiente</p> <pre><code>export $(sudo cat /opt/elasticbeanstalk/deployment/env | xargs)\n</code></pre> </li> <li> <p>luego corre para encontrar la carpeta de proyecto</p> <pre><code>sudo find / -iname \"nombre-de-tu-proyecto\"\n</code></pre> </li> <li> <p>Entra a la carpeta de tu proyecto con</p> <pre><code>cd /var/app/current/\n</code></pre> </li> <li> <p>y ya corre el comando para crear el super usuario con su contrase\u00f1a, con este usuario podr\u00e1s acceder al panel de admin de django en tu sitio desplegado</p> <pre><code>/var/app/venv/staging-LQM1lest/bin/python manage.py createsuperuser\n</code></pre> </li> </ol> </li> </ul> <p>Listo! todo deber\u00eda estar listo para tu aplicaci\u00f3n django servida en Elastic Beanstalk de AWS.</p>"},{"location":"devops/deploy-lebaron-galeana/","title":"Deploy Lebaron Galeana","text":"<p>El deploy de Lebaron Galena es diferente dependiendo de si el deploy lo requieres para el frontend o backend.</p>"},{"location":"devops/deploy-lebaron-galeana/#frontend","title":"Frontend","text":"<p>Para realizar el deploy se requiere:</p> <ul> <li>Tener el repo de Lebaron Galena Frontend cloneado en tu local.</li> <li>Tener instalado Node.js en su versi\u00f3n especificado en el archivo <code>.nvmrc</code> que est\u00e1 dentro del repositorio.</li> <li>Tener instalado todas las dependencias de NPM (<code>npm install</code>).</li> <li>Tener acceso a la bucket de S3 de <code>lebaron-galeana-frontend</code> en la consola AWS.</li> </ul> <p>El proceso para realizar el deploy es:</p> <ul> <li>Crear un Pull Request con tus cambios desde tu branch a la branch <code>Staging</code> y mergear el Pull Request.</li> <li>Hacer checkout a la branch de <code>Prod</code>.</li> <li>Hacer pull de la branch de <code>Staging</code>.<ul> <li>Si salen conflictos, toma en cuenta que es necesario utilizar URLs para la API diferentes en producci\u00f3n.</li> </ul> </li> <li>Corre <code>npm run build</code></li> <li>Entrar a la bucket de AWS S3 <code>lebaron-galena-frontend</code> y borrar todos los archivos.</li> <li>Copiar todos los archivos de tu local dentro del subdirectorio <code>dist</code>, dentro del repositorio, a la bucket de S3 de AWS <code>lebaron-galeana-frontend</code>.</li> <li>Hacer todos los archivos de la AWS S3 bucket, <code>lebaron-galeana-frontend</code>, p\u00fablicos:<ul> <li>En la consola de AWS, dentro de la bucket, seleccionas todos los archivos.</li> <li>Abres el men\u00fa de acciones.</li> <li>Seleccionas la opci\u00f3n de <code>Make public via ACL</code>.</li> <li>Confirmar.</li> </ul> </li> </ul> <p>Despu\u00e9s de este proceso, es importante probar tus cambios en producci\u00f3n para asegurar que tus cambios funcionan correctamente y no se introdujeron bugs sin querer.</p>"},{"location":"devops/deploy-lebaron-galeana/#backend","title":"Backend","text":"<p>Parar realizar el deploy se requiere:</p> <ul> <li>Tener el repo de Lebaron Galeana Backend cloneado en tu local.</li> <li>Tener instalado Elastic Beanstalk CLI en tu local.</li> <li>Tener la clave de acceso para el EB CLI. Este no se puede descargar de nuevo, es necesario ped\u00edrselo a un compa\u00f1ero que ya ha hecho el deploy previamente.</li> <li>Inicializar el EB CLI dentro del repositorio en tu local:<ul> <li>Estando dentro del directorio del repositorio, corre <code>eb init</code>.</li> <li>Te preguntar\u00e1 si quieres configurar CodeCommit, te puedes saltar esto.</li> <li>Para responder las dem\u00e1s preguntas, puedes utilizar estos valores de ejemplo:     <pre><code>Environment details for: Lebaron-Galeana-Production\nApplication name: Lebaron-Galeana-Production\nRegion: us-west-2\nDeployed Version: app-cad8-230529_084221228661\nEnvironment ID: e-6rkdvk7dh3\nPlatform: arn:aws:elasticbeanstalk:us-west-2::platform/Python 3.8 running on 64bit Amazon Linux 2/3.3.7\nTier: WebServer-Standard-1.0\nCNAME: Lebaron-Galeana-Production.us-west-2.elasticbeanstalk.com\nUpdated: 2023-05-29 14:42:41.411000+00:00\nStatus: Ready\nHealth: Green\n</code></pre></li> </ul> </li> </ul> <p>El proceso para realizar el deploy es:</p> <ul> <li>Crear un Pull Request con tus cambios desde tu branch a la branch <code>Staging</code> y mergear el Pull Request.</li> <li>Hacer checkout a la branch de <code>Prod</code>.</li> <li>Hacer pull de la branch de <code>Staging</code>.<ul> <li>Si salen conflictos, toma en cuenta que es necesario utilizar URLs diferentes en producci\u00f3n.</li> </ul> </li> <li>Correr <code>eb deploy</code> para mandar los cambios a producci\u00f3n.</li> </ul>"},{"location":"django%20y%20python/configuracion-de-venv-de-python/","title":"Configuracion de venv de python","text":"<p>Para trabajar en aplicaciones de Django es necesario configurar un entorno virtual de python (venv: virtual environment) Esta gu\u00eda es para Windows</p> <p>1- Siguiero que lo crees asi: Con tu proyecto de Django abierto en tu editor de c\u00f3digo, abre una terminal posicionado en la carpeta ra\u00edz del proyecto, una buena pr\u00e1ctica es que est\u00e9 ignorado en .gitignore para que tu entorno no se suba al repo de github, y buenos nombres son venv, env o myenv, crea el entorno virtual con el comando:</p> <p>nombre sugerido para el entorno virtual: ( env o venv )</p> <pre><code>py -m venv nombreDeTuEntorno\n</code></pre> <p>2-  (Debes tener los Scripts de tu computadora habilitados para activarlo) Para activar el venv ejecuta el comando:</p> <pre><code>.\\nombreDeTuEntorno\\Scripts\\activate\n</code></pre> <p>3- Si se activ\u00f3, debe verse el (nombreDeTuEntorno) entre parentesis a la izquierda de la ruta de tu terminal. Ahora instala las dependencias del proyecto una por una como veas que vayas necesitando, de esa manera agrega el nombre de la dependencia despues de install en el comando, o si el proyecto tiene buena documentacion deber\u00e1 tener un archivo requirements.txt:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"django%20y%20python/creacion-de-proyecto-basico-con-django/","title":"Creacion de proyecto basico con django","text":""},{"location":"django%20y%20python/creacion-de-proyecto-basico-con-django/#1-instalar-django-globalmente","title":"1. Instalar Django globalmente:","text":"<p>Si no tienes activados tus scripts de tu powershell seguir estos pasos :(https://managewhistle.com/posts/39)</p> <p>Si a\u00fan no tienes Django instalado globalmente, puedes hacerlo ejecutando el siguiente comando en tu terminal. Se recomienda instalar la versi\u00f3n LTS (Long Term Support) de Django para mayor estabilidad y mantenimiento a largo plazo:</p> <p>Ejemplo:</p> <pre><code>pip install django==4.2.10\n</code></pre>"},{"location":"django%20y%20python/creacion-de-proyecto-basico-con-django/#2-crear-un-nuevo-proyecto-django","title":"2. Crear un nuevo proyecto Django:","text":"<p>Empezaremos creando un nuevo proyecto nos ubicaremos en la carpeta que deseamos guardar nuestro proyecto abriremos una (Cmd) desde la carpte donde lo almacenaremos y ejecutamos este comando:</p> <p><pre><code>django-admin startproject myproject\n</code></pre> Donde (myproject) es el nombre de tu proyecto.</p>"},{"location":"django%20y%20python/creacion-de-proyecto-basico-con-django/#3-instalar-y-configurar-un-entorno-virtual","title":"3. Instalar y configurar un entorno virtual:","text":"<p>Al crear nuestro proyecto en la consola escribiremos este comando abrira nuestro projecto en un visual code:</p> <pre><code>C:\\Users\\Programacion&gt; code myproject\n</code></pre> <p>Estando en la carpeta principal de nuestro projecto crearemos nustro entorno virtual, Es una buena pr\u00e1ctica utilizar un entorno virtual para cada proyecto de Django. Esto te permite aislar las dependencias de cada proyecto y evitar conflictos entre ellas:</p> <pre><code>myproject\n|\n|\n|--myproject\n|  |--__pycache__/\n|  |--__init__.py\n|  |--asgi.py\n|  |--settings.py\n|  |--urls.py\n|  |--wsgi.py\n|  \n|--env\n|  |--include\n|  |--Lib\n|  |--Scripts\n|  |  |--activate\n</code></pre> <p>Instalaci\u00f3n de virtualenv:</p> <pre><code>pip install virtualenv\n</code></pre> <p>Creaci\u00f3n de un entorno virtual:</p> <p>En Windows::</p> <pre><code>python -m venv env\n</code></pre> <p>En macOS:</p> <pre><code>python3 -m venv env\n</code></pre> <p>Donde (env) es el nombre que le quieres dar a tu entorno virtual.</p> <p>Activaci\u00f3n del entorno virtual:</p> <p>En Windows:</p> <pre><code>.\\env\\Scripts\\activate\n</code></pre> <p>En macOS:</p> <pre><code>source  env/bin/activate\n</code></pre>"},{"location":"django%20y%20python/creacion-de-proyecto-basico-con-django/#4-ejecutar-el-servidor-de-desarrollo-y-instalar-django-en-entrno-virtual","title":"4. Ejecutar el servidor de desarrollo y instalar django en entrno virtual:","text":"<p>primero despues de que el etorno este activo al deve inicar con (env) eh istalaremos django:</p> <p><pre><code>(env) PS C:\\Users\\Programacion\\myproject&gt; pip install django==4.2.10\n</code></pre> Despues de instalar django corrermos en nustro servidor de desarollo con el siguiente comando:</p> <pre><code> python manage.py runserver\n</code></pre> <p>Esto iniciar\u00e1 el servidor de desarrollo en http://127.0.0.1:8000/. Puedes abrir este enlace en tu navegador para ver la p\u00e1gina de inicio de Django.</p>"},{"location":"django%20y%20python/creacion-de-proyecto-basico-con-django/#5-crear-una-aplicacion","title":"5. Crear una aplicaci\u00f3n:","text":"<p>Las aplicaciones en Django son m\u00f3dulos reutilizables que realizan funciones espec\u00edficas. Para crear una aplicaci\u00f3n, puedes ejecutar el siguiente comando en el directorio de tu proyecto:</p> <pre><code>python manage.py startapp myapp\n</code></pre> <p>Donde myapp es el nombre de tu aplicaci\u00f3n.</p>"},{"location":"django%20y%20python/creacion-de-proyecto-basico-con-django/#6-configurar-la-aplicacion-en-el-proyecto","title":"6. Configurar la aplicaci\u00f3n en el proyecto:","text":"<p>Despu\u00e9s de crear la aplicaci\u00f3n, debes agregarla al archivo settings.py de tu proyecto. Busca la lista INSTALLED_APPS y agrega el nombre de tu aplicaci\u00f3n:</p> <pre><code>INSTALLED_APPS = [\n    ...\n    'myapp',\n]\n</code></pre> <pre><code>myproject\n|\n|--myproject\n|  |--__pycache__/\n|  |--__init__.py\n|  |--asgi.py\n|  |--settings.py\n|  |--urls.py\n|  |--wsgi.py\n|  \n|--env\n</code></pre>"},{"location":"django%20y%20python/creacion-de-proyecto-basico-con-django/#7-crear-modelos-vistas-y-plantillas","title":"7. Crear modelos, vistas y plantillas:","text":"<p>Puedes comenzar a desarrollar tu aplicaci\u00f3n creando modelos, vistas y plantillas seg\u00fan sea necesario para tu proyecto.</p>"},{"location":"django%20y%20python/creacion-de-proyecto-basico-con-django/#8-ejecutar-migraciones","title":"8. Ejecutar migraciones:","text":"<p>Despu\u00e9s de definir tus modelos, necesitas ejecutar las migraciones para aplicar estos cambios a tu base de datos:</p> <pre><code>python manage.py makemigrations\npython manage.py migrate\n</code></pre>"},{"location":"django%20y%20python/creacion-de-proyecto-basico-con-django/#9-crear-un-superusuario","title":"9. Crear un superusuario:","text":"<p>Para acceder al panel de administraci\u00f3n de Django ( http://127.0.0.1:8000/admin/), necesitas crear un superusuario, detendremos nuestro server de desarollo en  nustra terminal con (CTRL + C) para ejecutar este comando:</p> <pre><code>python manage.py createsuperuser\n</code></pre> <p>Sigue las instrucciones en pantalla para completar la creaci\u00f3n del superusuario.</p> <p>\u00a1Listo! Ahora has configurado y comenzado un proyecto Django b\u00e1sico. Puedes comenzar a desarrollar tu aplicaci\u00f3n seg\u00fan tus necesidades.</p>"},{"location":"git%20y%20github/comandos-utiles-de-git/","title":"Comandos utiles de git","text":""},{"location":"git%20y%20github/comandos-utiles-de-git/#borrar-una-rama-local","title":"Borrar una rama local","text":"<ul> <li> <p>Querr\u00e1s borrar una rama local por alguna raz\u00f3n u otra. O por la raz\u00f3n de que las ramas de desarrollo son \"desechables\" y es molesto tener una lista muy larga de ramas antiguas no usadas, tal vez querremos eliminarlas para que no se acumulen</p> </li> <li> <p>Podemos borrar ramas locales con el comando:</p> <pre><code>git branch --delete nombre-de-la-rama\n</code></pre> </li> </ul>"},{"location":"git%20y%20github/comandos-utiles-de-git/#como-arreglar-problema-de-carpetas-o-archivos-no-ignorados-que-si-queremos-ignorar","title":"Como arreglar problema de carpetas o archivos no ignorados que s\u00ed queremos ignorar","text":"<ol> <li>Hay muchos tipos de archivos y carpetas que no debemos subir a Github como pycache, node_modules, entornos virtuales de python, etcetera, los cuales debemos agregar a un archivo llamado .gitignore antes de hacer un commit y empujarlo por primera vez. Pero hay muchas ocasiones en las que eso ya sucedi\u00f3 y esos archivos y/o carpetas ya estan en git y github y por esa raz\u00f3n no estan siendo ignorados por el .gitignore. C\u00f3mo arreglamos esto y podemos hacer que ahora s\u00ed sean ignorados? S\u00ed deber\u00e1s agregar correctamente esos archivos y carpetas al .gitignore y luego correo el comando:<pre><code>git rm --cached /nombre-de-la-carpeta-o-archivo\n</code></pre> </li> </ol>"},{"location":"git%20y%20github/comandos-utiles-de-git/#sobre-creacion-de-ramas-puedes-hacerlo-de-2-maneras","title":"Sobre creaci\u00f3n de ramas, puedes hacerlo de 2 maneras","text":"<ol> <li> <p>Puedes crear tu rama en github, como en el ejemplo de la imagen abajo, dice crear rama desde main, esto significa que intencionalmente estoy primero posicionado en <code>main</code> y luego en ese campo \"busco\" o creo la nueva rama que aun no existe y me da el boton para crearla.</p> </li> <li> <p>Despues de crearla, regresa a la terminal de tu proyecto y correo este comando para que Git identifique la nueva rama que acabas de crear en Github</p> <pre><code>git fetch\n</code></pre> </li> <li> <p>Y luego ya que reconozca la nueva rama, te puedes cambiar a esa rama con el comando:</p> <pre><code>git checkout nombre-de-tu-nueva-rama\n</code></pre> </li> <li> <p>La otra manera es crear la rama en la terminal tambien tomando en cuenta desde cual rama la crear\u00e1s que ser\u00e1 en la que est\u00e9s posicionado en el momento y puedes checar en qu\u00e9 rama estas primero al ver el nombre de la rama en la esquina de la pantalla de VS Code o con el comando que da m\u00e1s certeza porque a veces no se refresca el nombre de la rama en VS Code.</p> </li> </ol> <p>Este comando te mostrar\u00e1 de color verde y con un * la rama en la que est\u00e1s</p> <pre><code>    git branch\n</code></pre> <ul> <li> <p>Ahora s\u00ed puedes crear una nueva rama a partir de esta rama actual y al mismo tiempo te cambiar\u00e1s a esa rama. con:</p> <pre><code>git checkout -b nombre-de-tu-nueva-rama\n</code></pre> </li> <li> <p>Nota que este comando para crear una nueva rama debe tener la bandera <code>-b</code></p> </li> </ul>"},{"location":"git%20y%20github/como-generar-gitignore-para-distintos-lenguajes/","title":"Como generar gitignore para distintos lenguajes","text":"<ol> <li>Instala en VS Code la extensi\u00f3n de gitignore como esta en la foto</li> <li>Abre la paleta de comandos con <code>F1</code> \u00f3 con <code>Ctrl + Shift + P</code> y escribe <code>add gitignore</code> para ejecutar esa extensi\u00f3n</li> <li>Selecciona el lenguaje o framework para el que quieras el archivo .gitignore y la extensi\u00f3n lo generar\u00e1, si ya tienes uno existente tendr\u00e1s que elegir adjuntarle el nuevo contenido o sobreescribirlo.</li> </ol>"},{"location":"git%20y%20github/como-hacer-un-commit-en-git/","title":"Como hacer un commit en git","text":"<p>\u26a0\ufe0fEs muy importante que revises si trabajaste en la rama correcta para poder enviar cambios, si no, no env\u00edes el commit.</p> <p>\ud83d\udc47Escenifica o prepara tus archivos modificados: al inclulir el punto . en el comando agregar\u00e1s todos los archivos modificados al commit, pero tambien puedes escribir el nombre de los archivos y carpetas especificas, pero es m\u00e1s facil hacerlo con el punto ya que se asume que modificaste los deseados y los que no quieres que se suban estar\u00e1n en un .gitignore</p> <pre><code>git add .\n</code></pre> <p>Haz el commit con un mensaje descriptivo\ud83d\udc47</p> <pre><code>git commit -m \"your message\"\n</code></pre> <p>Empuja ese commit a la rama en la que est\u00e1s a github\ud83d\udc47</p> <p><pre><code>git push\n</code></pre> Revisa si se refleja el commit nuevo en tu repositorio https://github.com/</p>"},{"location":"git%20y%20github/crear-pull-request-en-github/","title":"Crear pull request en github","text":""},{"location":"git%20y%20github/crear-pull-request-en-github/#una-pull-request-solicitud-de-cambios-es-necesaria-para-poder-revisar-a-detalle-los-cambios-que-se-intentan-fusionar-a-la-rama-principal-para-evitar-errores-y-resolver-conflictos","title":"Una Pull Request (Solicitud de Cambios) es necesaria para poder revisar a detalle los cambios que se intentan fusionar a la rama principal para evitar errores y resolver conflictos","text":""},{"location":"git%20y%20github/crear-pull-request-en-github/#nota-debes-haber-empezado-a-hacer-cambios-en-el-codigo-correctamente-al-haber-creado-una-rama-a-partir-de-la-rama-principal-y-trabajar-en-esa-rama-nueva-tuya-y-hacer-tus-modificaciones-ahi-no-en-la-principal","title":"Nota: Debes haber empezado a hacer cambios en el c\u00f3digo correctamente al haber creado una rama a partir de la rama principal y trabajar en esa rama nueva tuya y hacer tus modificaciones ah\u00ed, no en la principal:","text":"<ol> <li> <p>Cuando hayas terminado de trabajar en tus cambios y modificaciones, empuja tus cambios a <code>&lt;tu-rama&gt;</code> y luego ve a tu repositorio en github</p> </li> <li> <p>Al ir a tu rama en tu repo de Github justo despu\u00e9s de haber empujado tu commit te aparecer\u00e1 una alerta amarilla con un atajo con un bot\u00f3n verde que dice Compare &amp; pull request para crear la Pull Request ya comparando tu rama, lo cual es m\u00e1s f\u00e1cil y r\u00e1pido</p> </li> <li> <p>Si no te aparece ese atajo, puedes crear la Pull Request al ir a la pesta\u00f1a de Pull requests y da click en el bot\u00f3n verde que dice New pull request</p> </li> <li> <p>Elije correctamente tu rama que es la de la derecha Compare para compararla con la que quieres fusionar que es la de la izquierda Base deberia ser la que corre bien en local como los nombres que solemos usar como <code>desarrollo</code>, <code>development</code>, <code>staging</code>. Creala en el boton verde que dice Create pull request</p> </li> <li> <p>Y luego ya vas a estar en la p\u00e1gina para editar la pull request, revisa de nuevo que las ramas est\u00e9n correctas la de comparaci\u00f3n y la base:</p> </li> <li> <p>Lo \u00faltimo es revisar que tenga un buen T\u00edtulo, el cual ser\u00e1 el mensaje del ultimo commit que hiciste en tu rama, si no es bueno, ed\u00edtalo y pon un buen t\u00edtulo breve, y luego a\u00f1ade una Descipci\u00f3n buena que contenga lo que realizaste en forma breve y entendible, puedes agregar links, capturas de pantalla entre otras cosas, y lo tercero es asignar Reviewers a tu pull request, estos ser\u00e1n las pesonas que revisar\u00e1n tus cambios y ellos decidir\u00e1n aprobar, comentar o desaprobar tu pull request y solicitarte cambios que sean necesarios que hagas para poder proseguir con a revisi\u00f3n y fusi\u00f3n de tus cambios a la otra rama si todo es aprobado, as\u00ed que estate al pendiente por si el acaso el Supervisor de solicite cambios, y ya despu\u00e9s de revisar y hacer estas 3 cosas crea la pull request en el bot\u00f3n verde que dice Create pull request:</p> </li> </ol>"},{"location":"git%20y%20github/ideas-de-gitignore-para-python-y-node/","title":"Ideas de gitignore para python y node","text":"<p>Para un proyecto de python, django; agrega esto a tu .gitignore para ignorar todo tipo de carpeta y arhivo de python que no sea necesario subir a github:</p> <p><pre><code># Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/#use-with-ide\n.pdm.toml\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n</code></pre> Para un proyecto de Node, como react por ejemplo, a\u00f1ade esto a tu .gitignore para que no se suban carpetas y archivos innecesarios a github:</p> <pre><code># Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n.pnpm-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional stylelint cache\n.stylelintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variable files\n.env\n.env.development.local\n.env.test.local\n.env.production.local\n.env.local\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n.parcel-cache\n\n# Next.js build output\n.next\nout\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and not Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# vuepress v2.x temp and cache directory\n.temp\n.cache\n\n# Docusaurus cache and generated files\n.docusaurus\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\n.vscode-test\n\n# yarn v2\n.yarn/cache\n.yarn/unplugged\n.yarn/build-state.yml\n.yarn/install-state.gz\n.pnp.*\n</code></pre>"},{"location":"git%20y%20github/remover-carpetas-y-archivos-de-git/","title":"Remover carpetas y archivos de git","text":""},{"location":"git%20y%20github/remover-carpetas-y-archivos-de-git/#esto-es-para-ignorar-carpetas-y-archivos-que-habian-sido-commiteados-a-git-y-github-que-no-deberia-serlo-y-que-sepas-como-quitarlos-de-git-y-comenzarlos-a-ignorarlos-en-gitignore","title":"Esto es para ignorar carpetas y archivos que habian sido commiteados a git y github que no deberia serlo, y que sepas como quitarlos de git y comenzarlos a ignorarlos en .gitignore","text":"<ol> <li> <p>Corre este comando en la carpeta donde esta el archivo o carpeta que quieres remover de git:</p> <pre><code>git rm -r --cached nombreDeTuCarpetaOArchivo\n\n&lt;!-- O AGREGA */TuCarpetaOArchivo/* LOS ASTERISCOS Y DIAGONALES ALREDEDOR DEL NOMBRE DE ARCHIVO O CARPETA PARA QUE NO TENGAS QUE ENTRAR A LA CARPETA ESPECIFICA DONDE ESTA EL ARCHIVO --&gt;\n</code></pre> </li> <li> <p>Luego, agrega <code>nombreDeTuCarpeta</code> de nuevo  a .gitignore aun si ya lo ten\u00edas, para que lo comience a ignorar otra vez, esto es necesario para que funcione</p> </li> </ol>"},{"location":"misc/activar-scripts-en-powershell/","title":"Activar scripts en powershell","text":""},{"location":"misc/activar-scripts-en-powershell/#1-abre-una-terminal-de-powershell-como-administrador","title":"1. Abre una terminal de powershell como <code>administrador</code>.","text":""},{"location":"misc/activar-scripts-en-powershell/#2-verfica-si-los-scripts-son-permitidos","title":"2. Verfica si los scripts son permitidos:","text":"powershell<pre><code>Get-ExecutionPolicy\n</code></pre> <p>Podr\u00eda salir <code>Restricted</code>, significa que estan restringidos y por eso no te funciona activar tu venv de python cuando corres por ejemplo: <code>.\\env\\Scripts\\activate</code></p>"},{"location":"misc/activar-scripts-en-powershell/#3-para-cambiarlos-a-no-restringidos-corre-el-siguiente-comando","title":"3. Para cambiarlos a <code>no restringidos</code> corre el siguiente comando:","text":"powershell<pre><code>Set-ExecutionPolicy Unrestricted\n\n#indicar S\u00ed[S]\n</code></pre>"},{"location":"misc/activar-scripts-en-powershell/#4-verifica-de-nuevo","title":"4. Verif\u00edca de nuevo:","text":"powershell<pre><code>Get-ExecutionPolicy\n</code></pre> <p>Ahora te deber\u00eda salir <code>Unrestricted</code></p> <p>Eso indica que ya es posible correr scripts en tu powershell como <code>.\\env\\Scripts\\activate</code> exitosamente</p>"},{"location":"misc/como-correr-apps-de-react-native/","title":"Como correr apps de react native","text":"<ul> <li> <p>Primero, nstalar <code>node_modules</code> con:</p> <pre><code>npm install\n</code></pre> </li> <li> <p>Luego, instalar todo con:</p> <pre><code>npx expo install\n</code></pre> </li> <li> <p>Ahora, corre el servidor local de expo con:</p> <pre><code>npx expo start --go\n</code></pre> </li> <li> <p>Para poder acceder debes temporalmente borrar <code>\"projectId\":\"...\"</code> del archivo <code>app.json</code>, pero si al final vas a subir commits de cambios, vuelve a poner el <code>\"projectId\":\"...\"</code> como estaba al principio.</p> </li> <li> <p>El servidor del backend debe correr con:</p> <pre><code>py manage.py runserver 0.0.0.0:8000\n</code></pre> </li> <li> <p>Debes tener instalada en tu celular la app de <code>Expo</code> y con ella escanea c\u00f3digo QR que sale en la terminal.</p> </li> </ul>"},{"location":"misc/instalacion-de-nvm-en-mac/","title":"Instalacion de nvm en mac","text":""},{"location":"misc/instalacion-de-nvm-en-mac/#nvm-node-version-manager-es-una-herramienta-muy-util-y-necesaria-porque-tenemos-muchos-proyectos-viejos-de-react-que-solo-funcionan-con-versiones-viejas-como-16-o-anteriores-y-tambien-tenemos-otros-proyectos-que-usan-versiones-mas-nuevas-esta-herramienta-te-ayudara-para-instalar-y-cambiarte-de-versiones-de-node-y-tal-vez-la-uses-por-otras-razones","title":"NVM (Node Version Manager) es una herramienta muy \u00fatil y necesaria porque tenemos muchos proyectos viejos de React que solo funcionan con versiones viejas como 16 o anteriores, y tambi\u00e9n tenemos otros proyectos que usan versiones m\u00e1s nuevas, esta herramienta te ayudar\u00e1 para instalar y cambiarte de versiones de node, y tal vez la uses por otras razones.","text":""},{"location":"misc/instalacion-de-nvm-en-mac/#instalacion","title":"INSTALACION","text":"<p>1- para instalar o actualizar <code>nvm</code>, corre uno de estos dos comandos:</p> <pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\n</code></pre> <p>\u00f3:</p> <pre><code>wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\n</code></pre> <p>El comando que elijas descargar\u00e1 y correr\u00e1 un <code>script</code>, este clona el repositorio de nvm en <code>~/.nvm</code> e intentar\u00e1 agregar las <code>source lines</code> del siguiente snippet al archivo correcto del perfil (<code>~/.bash_profile</code>, <code>~/.zshrc</code>, <code>~/.profile</code>, o <code>~/.bashrc</code>)</p> <p><code>js export NVM_DIR=\"$([ -z \"${XDG_CONFIG_HOME-}\" ] &amp;&amp; printf %s \"${HOME}/.nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\" [ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\" # This loads nvm</code></p> <p>2- Para verificar que se instal\u00f3 corre:</p> <pre><code>command -v nvm\n</code></pre>"},{"location":"misc/instalacion-de-nvm-en-mac/#para-solucionar-problemas-ve-a","title":"Para solucionar problemas ve a:","text":"<p>https://github.com/nvm-sh/nvm/tree/v0.39.7?tab=readme-ov-file#troubleshooting-on-macos</p>"},{"location":"misc/instalacion-de-nvm-en-mac/#uso","title":"USO","text":"<p>Ve al enlace de abajo para ver los distintos comandos para usarla como: instalar y usar versiones especificas, ver la lista de versiones que tienes instaladas, etc: https://github.com/nvm-sh/nvm/tree/v0.39.7?tab=readme-ov-file#usage</p>"},{"location":"misc/instalacion-y-uso-de-nvm-en-windows/","title":"Instalacion y uso de nvm en windows","text":""},{"location":"misc/instalacion-y-uso-de-nvm-en-windows/#nvm-node-version-manager-para-windows-es-una-herramienta-muy-util-y-necesaria-porque-tenemos-muchos-proyectos-viejos-de-react-que-solo-funcionan-con-versiones-viejas-como-16-o-anteriores-y-tambien-tenemos-otros-proyectos-que-usan-versiones-mas-nuevas-esta-herramienta-te-ayudara-para-instalar-y-cambiarte-de-versiones-de-node-y-tal-vez-la-uses-por-otras-razones","title":"<code>NVM (Node Version Manager) para windows</code> es una herramienta muy \u00fatil y necesaria porque tenemos muchos proyectos viejos de <code>React</code> que solo funcionan con versiones viejas como 16 o anteriores, y tambi\u00e9n tenemos otros proyectos que usan versiones m\u00e1s nuevas, esta herramienta te ayudar\u00e1 para instalar y cambiarte de versiones de <code>node</code>, y tal vez la uses por otras razones.","text":""},{"location":"misc/instalacion-y-uso-de-nvm-en-windows/#instalacion","title":"INSTALACION:","text":"<p>1- Ve al repositorio https://github.com/coreybutler/nvm-windows y da click en el boton azul que dice <code>download now!</code></p> <p>2- Ahi descarga el <code>.exe</code> m\u00e1s reciente</p> <p>3- Abre el archivo ejecutador que has descargado y completa la instalaci\u00f3n <code>Wizard</code></p> <p>4- En una terminal, revisa si se ha instalado correctamente con:</p> <pre><code>nvm -v\n</code></pre> <p>\u00f3 con:</p> <pre><code>nvm --version\n</code></pre>"},{"location":"misc/instalacion-y-uso-de-nvm-en-windows/#uso","title":"USO","text":"<p>1- Puedes enlistar las versiones de <code>node</code> que tienes actualmente instaladas en tu computadora con:</p> <pre><code>nvm list\n</code></pre> <p>Este comando lo puedes ejecutar despu\u00e9s de que instales una versi\u00f3n nueva para verificar que s\u00ed se instal\u00f3</p> <p>2- Para instalar versiones de node pon la version especifica, con el siguiente comando por ejemplo:</p> <pre><code>nvm install 20.10.0\n</code></pre> <p>3- Revisa de nuevo si se ha instalado con <code>nvm list</code> y te deberia salir la lista de versiones instaladas ahora incluyendo la que acabas de instalar si fue exitosa:</p> <pre><code>C:\\Users\\hmanu&gt;nvm list\n\n  * 20.10.0 (Currently using 64-bit executable)\n    19.9.0\n    18.15.0\n    16.20.2\n    16.19.0\n    15.14.0\n    14.21.3\n</code></pre> <p>4- Para cambiarte de versi\u00f3n usa el siguiente comando especificando la versi\u00f3n a la que te quieres cambiar para que usar:</p> <pre><code>nvm use 20.10.0\n</code></pre>"},{"location":"misc/instalacion-y-uso-de-nvm-en-windows/#para-ver-mas-comandos-y-demas-ve-al-repo-en-la-seccion-de-usage-httpsgithubcomcoreybutlernvm-windowstabreadme-ov-file","title":"Para ver m\u00e1s comandos y dem\u00e1s, ve al repo en la secci\u00f3n de <code>Usage</code>: https://github.com/coreybutler/nvm-windows?tab=readme-ov-file","text":""},{"location":"misc/netlify-forms/","title":"Netlify Forms","text":""},{"location":"misc/netlify-forms/#la-funcionalidad-de-netlify-para-manejar-formularios-sin-servidor-te-permite-manejar-tus-formularios-sin-llamadas-api-extras-o-javascript-adicional","title":"La funcionalidad de Netlify para manejar formularios sin servidor te permite manejar tus formularios sin llamadas API extras o Javascript adicional","text":"<ol> <li>Sigue este doc de Netlify para que aprendas a detalle c\u00f3mo activar la detecci\u00f3n de formularios en tus sitios en tu dashboard de Netlify, ah\u00ed tambi\u00e9n explica m\u00e1s detalles sobre c\u00f3mo crear formularios de HTML y Javascript con AJAX y m\u00e1s \ud83d\udc49 Forms setup \ud83e\udd1aDespues de que le eches un vistazo a ese doc de Netlify regresa a esta gu\u00eda para continuar!</li> <li>El \u00fanico detalle que no incluye explicitamente el doc de Netlify es que para que nuestros formularios en React JSX sean detectados por Netlify, es que, debemos agregar el formulario a nuestro <code>index.html</code> tambi\u00e9n.</li> <li>Por ejemplo: tenemos un formulario de contacto &gt; <code>ContactForm.jsx</code> que es el componente con el que va a interactuar el usuario en la p\u00e1gina.</li> </ol> <p>TestForm.jsx<pre><code>function testForm() {\n    return (\n        &lt;&gt;\n            &lt;form name=\"contact\" method=\"post\" data-netlify=\"true\"&gt;\n                &lt;p&gt;\n                    &lt;label&gt;Your Name: &lt;input type=\"text\" name=\"name\" /&gt;&lt;/label&gt;\n                &lt;/p&gt;\n                &lt;p&gt;\n                    &lt;label&gt;Your Email: &lt;input type=\"email\" name=\"email\" /&gt;&lt;/label&gt;\n                &lt;/p&gt;\n                &lt;p&gt;\n                    &lt;label&gt;Your Role: &lt;select name=\"role[]\" multiple&gt;\n                        &lt;option value=\"leader\"&gt;Leader&lt;/option&gt;\n                        &lt;option value=\"follower\"&gt;Follower&lt;/option&gt;\n                    &lt;/select&gt;&lt;/label&gt;\n                &lt;/p&gt;\n                &lt;p&gt;\n                    &lt;label&gt;Message: &lt;textarea name=\"message\"&gt;&lt;/textarea&gt;&lt;/label&gt;\n                &lt;/p&gt;\n                &lt;p&gt;\n                    &lt;button type=\"submit\"&gt;Send&lt;/button&gt;\n                &lt;/p&gt;\n            &lt;/form&gt;\n        &lt;/&gt;\n    )\n}\n\nexport default testForm\n</code></pre> Netlify no va a detectar nuestro formulario de JSX ah\u00ed, as\u00ed que, debemos agregarlo tambi\u00e9n en <code>index.html</code> para que lo detecte. Y la estructura de nuestro proyecto de React es: <pre><code>|-- src/ \n|   |-- components/\n|   |   |-- ContactForm.jsx\n|\n|-- index.html\n</code></pre> 4. Necesitas agregar tu formulario dentro de la etiqueta <code>&lt;body&gt; &lt;/body&gt;</code> en <code>index.html</code>, aunque no es necesario incluir todas las etiquetas envoltorias extra, por ejemplo as\u00ed:</p> <p>index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\" /&gt;\n  &lt;link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon-square.png\" /&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n  &lt;title&gt;Test Form Site&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;form data-netlify=\"true\" netlify name=\"test-form\" method=\"post\" hidden&gt;\n    &lt;input type=\"text\" name=\"name\" /&gt;\n    &lt;input type=\"email\" name=\"email\" /&gt;\n    &lt;select name=\"role[]\" multiple&gt;&lt;/select&gt;\n    &lt;textarea name=\"message\"&gt;&lt;/textarea&gt;\n  &lt;/form&gt;\n  &lt;div id=\"root\"&gt;&lt;/div&gt;\n  &lt;script type=\"module\" src=\"/src/main.jsx\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> Debes incluir los atributos o propiedades correctas a las etiquetas y los mismos nombres de los inputs que pusiste en el formulario de <code>JSX</code> Eso es todo, ya solo debes lanzar tu sitio en Netlify para que pruebes si el formulario es detectado por Netlify y todo lo dem\u00e1s relacionado a eso como activar notificaciones, ver los env\u00edos, entre otras cosas como viste en el doc de Netlify que puse al principio en esta gu\u00eda\ud83d\udc4d\ud83d\ude09</p>"},{"location":"react%20y%20javascript/como-acceder-en-movil-al-servidor-local-de-react-vite/","title":"Como acceder en movil al servidor local de react vite","text":"<p>En un proyecto de <code>react + vite</code> el comando predeterminado para iniciar el servidor local es <code>npm run dev</code>, este inicia el servidor local en <code>http://localhost:5173</code>, y se ve asi en la terminal:</p> <pre><code>npm run dev\n\n&gt; frontend@0.0.0 dev\n&gt; vite\n\n  VITE v5.2.6  ready in 361 ms\n\n  \u279c  Local:   http://localhost:5173/\n  \u279c  Network: use --host to expose\n  \u279c  press h + enter to show help\n</code></pre> <p>Ah\u00ed es donde acceder\u00e1s en tu computadora para trabajar en tu aplicaci\u00f3n localmente, pero muchas veces nos es necesario ver la aplicaci\u00f3n local desde nuestro celular tambi\u00e9n, para eso tenemos que acceder a ella en el mismo puerto <code>5173</code> pero en lugar de http://localhost, debe ser nuestra IPv4 address, y la podemos conocer con el comando:</p> <pre><code>ipconfig\n</code></pre> <p>este comando imprimir\u00e1 en la terminal mucha informaci\u00f3n, solo tienes que encontrar la IPv4 address que esta abajo.</p> <p>ahora s\u00ed en el navegador de tu celular puedes tratar de ir a tu direccion <code>IPv4:puerto</code> estando conectado a la misma red wifi a la que est\u00e1 tu computadora, por ejemplo <code>192.168.0.0:5173</code> pero el problema aqu\u00ed es que en realidad no funcionar\u00e1 a\u00fan, esto es porque la configuraci\u00f3n de vite solo permite a la computadora acceder al localhost pero no a ning\u00fan otro dispositivo como tu celular, para eso solo tienes que agregar --host al script de <code>package.json</code> como lo dec\u00eda la pista al principio \u2191</p> <p>Agrega --host en package.json a <code>{\"scripts\":{\"dev\":\"vite\"}}</code> as\u00ed:</p> <pre><code>{\n................\n  \"scripts\": {\n    \"dev\": \"vite --host\",\n    \"build\": \"vite build\",\n .................\n  },\n</code></pre>"},{"location":"react%20y%20javascript/idea-de-estructura-para-apps-de-react/","title":"Idea de estructura para apps de react","text":"<ul> <li>(Components)</li>   En la carpeta principal de nuestro proyecto, llamada 'src', creamos una carpeta especial llamada components. Esta carpeta es como nuestra caja de herramientas, donde guardamos los componentes principales y esenciales de nuestra aplicaci\u00f3n. Estos componentes son como las herramientas que usamos para construir nuestra aplicaci\u00f3n.  Por ejemplo, imaginemos que uno de nuestros componentes principales es el encabezado de nuestra p\u00e1gina, que llamamos Header.js. Este componente podr\u00eda contener el logotipo y la barra de navegaci\u00f3n de nuestra aplicaci\u00f3n. Otro componente esencial podr\u00eda ser el pie de p\u00e1gina, que llamamos Footer.js, que incluye informaci\u00f3n de contacto y enlaces importantes.  La ventaja de tener estos componentes en una carpeta dedicada es que se vuelven f\u00e1cilmente accesibles y reutilizables en toda la aplicaci\u00f3n. Si necesitamos usar el encabezado en una p\u00e1gina o pantalla diferente, simplemente podemos llamar al archivo ( Header.js ) desde la carpeta de componentes, como si estuvi\u00e9ramos tomando una herramienta de nuestra caja de herramientas. Esto hace que nuestro c\u00f3digo sea m\u00e1s legible y f\u00e1cil de mantener para nosotros y para cualquier persona que trabaje en el proyecto.  Ejemplo:  <pre><code>|-- components/\n|   |-- Header.js\n|   |-- Footer.js\n|   |-- ...\n|\n</code></pre> </ul> <ul> <li>(Pages)</li>   En nuestra aplicaci\u00f3n,a detro de la carpeta 'src' la carpeta pages cumple un papel fundamental. Aqu\u00ed es donde almacenaremos cada p\u00e1gina de nuestro componente principal, como por ejemplo el login, registro y p\u00e1gina principal (home). Cada una de estas p\u00e1ginas tendr\u00e1 su propia carpeta dentro de pages(resaltando que solo se creara en caso de ser nesesario en caso contrario no dejar carpteas vacias), con el mismo nombre que la p\u00e1gina correspondiente.  Por ejemplo, para la p\u00e1gina de inicio de sesi\u00f3n (login), tendr\u00edamos una estructura as\u00ed:  <pre><code>pages/\n|\n|---login/\n|    |--Login.js\n     | // Otros archivos relacionados con el login\n     |--components/\n     |    // Componentes espec\u00edficos del login\n     |\n     |--services/\n     |   // Servicios relacionados con el login\n     |\n     |--hooks/\n     |  // Hooks personalizados para el login\n     |\n     |--styles/\n     | // Estilos espec\u00edficos del login\n     | \n     |--utilities/\n     |  // Utilidades relacionadas con el login    \n</code></pre>  De esta manera, cada p\u00e1gina tiene su propia estructura organizada.  Es importante destacar que esta organizaci\u00f3n ayuda a mantener el c\u00f3digo limpio y f\u00e1cil de mantener, ya que cada parte de la aplicaci\u00f3n est\u00e1 claramente separada y etiquetada seg\u00fan su funci\u00f3n.   </ul> <li>Estructura Basica react js: </li> <pre><code>src/\n|-- components/\n|   |-- Header.js\n|   |-- Footer.js\n|   |-- ...\n|\n|-- pages/\n|   |-- Home/\n|   |   |-- Home.js\n|   |   |-- components/\n|   |   |    |-- HomeHeader.js\n|   |   |-- hooks/\n|   |   |    |-- useTop.js\n|   |   |-- styled-components/\n|   |   |    |-- Home.css\n|   |   |    |-- ...\n|   |-- Login/\n|   |   |-- Login.js\n|   |   |-- components/\n|   |   |    |-- LoginForm.js\n|   |   |-- hooks/\n|   |   |    |-- useTop.js\n|   |   |-- styled-components/\n|   |   |    |-- Login.css\n|   |\n|   |-- Register/\n|       |-- Register.js\n|       |-- components/\n|       |    |-- RegisterForm.js\n|       |-- hooks/\n|       |    |-- useTop.js\n|       |-- styled-components/\n|            |-- Register.css\n|\n|-- store/\n|   |-- actions/\n|   |   |-- actionTypes.js\n|   |   |-- userActions.js\n|   |   |-- ...\n|   |\n|   |-- reducers/\n|   |   |-- userReducer.js\n|   |   |-- ...\n|   |\n|   |-- store.js\n|\n|-- styles/\n|   |-- GlobalStyles.js\n|   |-- theme.js\n|   |-- ...\n|\n|-- hooks/\n|   |-- useCustomHook.js\n|   |-- ...\n|\n|-- utils/\n|   |-- api.js\n|   |-- helpers.js\n|   |-- ...\n|\n|-- App.js\n|-- index.js\n</code></pre>"}]}